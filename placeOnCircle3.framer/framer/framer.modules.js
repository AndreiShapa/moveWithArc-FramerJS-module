require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"arcMovement":[function(require,module,exports){
exports.moveWithArc = function(layer, startPointX, startPointY, endPointX, endPointY) {
  var arc, proxy;
  arc = function(counter, layer, x1, y1, x2, y2) {
    layer.midX = startPointX - Math.sin((counter + 180) * Math.PI / 180) * (endPointX - startPointX);
    return layer.midY = endPointY - Math.cos((counter + 180) * Math.PI / 180) * (startPointY - endPointY);
  };
  proxy = new Layer({
    width: 0,
    height: 0,
    backgroundColor: "null"
  });
  proxy.states.add({
    finish: {
      x: 360
    }
  });
  proxy.states.next();
  return proxy.on("change:x", function() {
    return arc(proxy.x / 4, layer, startPointX, startPointY, endPointX, endPointY);
  });
};

exports.placeOnElipse = function(layer, centerX, centerY, angle, radiusX, radiusY) {
  layer.midX = centerX - Math.sin((angle + 180) * Math.PI / 180) * radiusX;
  return layer.midY = centerY - Math.cos((angle + 180) * Math.PI / 180) * radiusY;
};

exports.circlePoint = function(centerX, centerY, angle, radiusX, radiusY) {
  var x, y;
  x = centerX - Math.sin((angle + 180) * Math.PI / 180) * radiusX;
  y = centerY - Math.cos((angle + 180) * Math.PI / 180) * radiusY;
  return {
    x: x,
    y: y
  };
};


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbWFtZXppdG8vZ2l0L21vdmVXaXRoQXJjL3BsYWNlT25DaXJjbGUzLmZyYW1lci9tb2R1bGVzL2FyY01vdmVtZW50LmNvZmZlZSIsIi9Vc2Vycy9tYW1leml0by9naXQvbW92ZVdpdGhBcmMvcGxhY2VPbkNpcmNsZTMuZnJhbWVyL21vZHVsZXMvbXlNb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDSUEsT0FBTyxDQUFDLFdBQVIsR0FBb0IsU0FBQyxLQUFELEVBQVEsV0FBUixFQUFxQixXQUFyQixFQUFrQyxTQUFsQyxFQUE2QyxTQUE3QztBQUNuQixNQUFBO0VBQUEsR0FBQSxHQUFJLFNBQUMsT0FBRCxFQUFTLEtBQVQsRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsRUFBNUI7SUFDSCxLQUFLLENBQUMsSUFBTixHQUFXLFdBQUEsR0FBWSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsT0FBQSxHQUFRLEdBQVQsQ0FBQSxHQUFpQixJQUFJLENBQUMsRUFBdEIsR0FBMkIsR0FBcEMsQ0FBQSxHQUF5QyxDQUFDLFNBQUEsR0FBVSxXQUFYO1dBQ2hFLEtBQUssQ0FBQyxJQUFOLEdBQVcsU0FBQSxHQUFVLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxPQUFBLEdBQVEsR0FBVCxDQUFBLEdBQWlCLElBQUksQ0FBQyxFQUF0QixHQUEyQixHQUFwQyxDQUFBLEdBQXlDLENBQUMsV0FBQSxHQUFZLFNBQWI7RUFGM0Q7RUFJSixLQUFBLEdBQVksSUFBQSxLQUFBLENBQ1g7SUFBQSxLQUFBLEVBQU8sQ0FBUDtJQUNBLE1BQUEsRUFBUSxDQURSO0lBRUEsZUFBQSxFQUFpQixNQUZqQjtHQURXO0VBS1osS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFiLENBQ0M7SUFBQSxNQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsR0FBSDtLQUREO0dBREQ7RUFJQSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQWIsQ0FBQTtTQUVBLEtBQUssQ0FBQyxFQUFOLENBQVMsVUFBVCxFQUFxQixTQUFBO1dBQ3BCLEdBQUEsQ0FBSSxLQUFLLENBQUMsQ0FBTixHQUFRLENBQVosRUFBZSxLQUFmLEVBQXNCLFdBQXRCLEVBQW1DLFdBQW5DLEVBQWdELFNBQWhELEVBQTJELFNBQTNEO0VBRG9CLENBQXJCO0FBaEJtQjs7QUFtQnBCLE9BQU8sQ0FBQyxhQUFSLEdBQXNCLFNBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsT0FBakMsRUFBMEMsT0FBMUM7RUFDckIsS0FBSyxDQUFDLElBQU4sR0FBVyxPQUFBLEdBQVEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLEtBQUEsR0FBTSxHQUFQLENBQUEsR0FBZSxJQUFJLENBQUMsRUFBcEIsR0FBeUIsR0FBbEMsQ0FBQSxHQUF1QztTQUMxRCxLQUFLLENBQUMsSUFBTixHQUFXLE9BQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsS0FBQSxHQUFNLEdBQVAsQ0FBQSxHQUFlLElBQUksQ0FBQyxFQUFwQixHQUF5QixHQUFsQyxDQUFBLEdBQXVDO0FBRnJDOztBQUl0QixPQUFPLENBQUMsV0FBUixHQUFvQixTQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLEtBQW5CLEVBQTBCLE9BQTFCLEVBQW1DLE9BQW5DO0FBQ2xCLE1BQUE7RUFBQSxDQUFBLEdBQUUsT0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxLQUFBLEdBQU0sR0FBUCxDQUFBLEdBQWUsSUFBSSxDQUFDLEVBQXBCLEdBQXlCLEdBQWxDLENBQUEsR0FBdUM7RUFDakQsQ0FBQSxHQUFFLE9BQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsS0FBQSxHQUFNLEdBQVAsQ0FBQSxHQUFlLElBQUksQ0FBQyxFQUFwQixHQUF5QixHQUFsQyxDQUFBLEdBQXVDO0FBQ2pELFNBQU87SUFBQSxDQUFBLEVBQUUsQ0FBRjtJQUFLLENBQUEsRUFBRSxDQUFQOztBQUhXOzs7O0FDdkJwQixPQUFPLENBQUMsS0FBUixHQUFnQjs7QUFFaEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtTQUNwQixLQUFBLENBQU0sdUJBQU47QUFEb0I7O0FBR3JCLE9BQU8sQ0FBQyxPQUFSLEdBQWtCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiNhdXRob3IgU2VyZ2l5IFZvcm9ub3YgdHdpdHRlci5jb20vbWFtZXppdG8gZHJpYmJibGUuY29tL21hbWV6aXRvXG4jZG9uZSBmb3IgRnJhbWVyIExvbmRvbiBmcmFtZXJsb25kb24uY29tXG5cblxuZXhwb3J0cy5tb3ZlV2l0aEFyYz0obGF5ZXIsIHN0YXJ0UG9pbnRYLCBzdGFydFBvaW50WSwgZW5kUG9pbnRYLCBlbmRQb2ludFkpLT5cblx0YXJjPShjb3VudGVyLGxheWVyLCB4MSwgeTEsIHgyLCB5MiktPlxuXHRcdGxheWVyLm1pZFg9c3RhcnRQb2ludFgtTWF0aC5zaW4oKGNvdW50ZXIrMTgwKSAgKiBNYXRoLlBJIC8gMTgwKSooZW5kUG9pbnRYLXN0YXJ0UG9pbnRYKVxuXHRcdGxheWVyLm1pZFk9ZW5kUG9pbnRZLU1hdGguY29zKChjb3VudGVyKzE4MCkgICogTWF0aC5QSSAvIDE4MCkqKHN0YXJ0UG9pbnRZLWVuZFBvaW50WSlcblxuXHRwcm94eSA9IG5ldyBMYXllclxuXHRcdHdpZHRoOiAwXG5cdFx0aGVpZ2h0OiAwXG5cdFx0YmFja2dyb3VuZENvbG9yOiBcIm51bGxcIlxuXG5cdHByb3h5LnN0YXRlcy5hZGRcblx0XHRmaW5pc2g6XG5cdFx0XHR4OiAzNjBcblxuXHRwcm94eS5zdGF0ZXMubmV4dCgpXG5cblx0cHJveHkub24gXCJjaGFuZ2U6eFwiLCAtPlxuXHRcdGFyYyBwcm94eS54LzQsIGxheWVyLCBzdGFydFBvaW50WCwgc3RhcnRQb2ludFksIGVuZFBvaW50WCwgZW5kUG9pbnRZXG5cbmV4cG9ydHMucGxhY2VPbkVsaXBzZT0obGF5ZXIsIGNlbnRlclgsIGNlbnRlclksIGFuZ2xlLCByYWRpdXNYLCByYWRpdXNZKS0+XG5cdGxheWVyLm1pZFg9Y2VudGVyWC1NYXRoLnNpbigoYW5nbGUrMTgwKSAgKiBNYXRoLlBJIC8gMTgwKSpyYWRpdXNYXG5cdGxheWVyLm1pZFk9Y2VudGVyWS1NYXRoLmNvcygoYW5nbGUrMTgwKSAgKiBNYXRoLlBJIC8gMTgwKSpyYWRpdXNZXG5cbmV4cG9ydHMuY2lyY2xlUG9pbnQ9KGNlbnRlclgsIGNlbnRlclksIGFuZ2xlLCByYWRpdXNYLCByYWRpdXNZKS0+XG5cdFx0eD1jZW50ZXJYLU1hdGguc2luKChhbmdsZSsxODApICAqIE1hdGguUEkgLyAxODApKnJhZGl1c1hcblx0XHR5PWNlbnRlclktTWF0aC5jb3MoKGFuZ2xlKzE4MCkgICogTWF0aC5QSSAvIDE4MCkqcmFkaXVzWVxuXHRcdHJldHVybiB4OngsIHk6eVxuIiwiIyBBZGQgdGhlIGZvbGxvd2luZyBsaW5lIHRvIHlvdXIgcHJvamVjdCBpbiBGcmFtZXIgU3R1ZGlvLiBcbiMgbXlNb2R1bGUgPSByZXF1aXJlIFwibXlNb2R1bGVcIlxuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IG5hbWUsIGxpa2UgbXlNb2R1bGUubXlGdW5jdGlvbigpIG9yIG15TW9kdWxlLm15VmFyXG5cbmV4cG9ydHMubXlWYXIgPSBcIm15VmFyaWFibGVcIlxuXG5leHBvcnRzLm15RnVuY3Rpb24gPSAtPlxuXHRwcmludCBcIm15RnVuY3Rpb24gaXMgcnVubmluZ1wiXG5cbmV4cG9ydHMubXlBcnJheSA9IFsxLCAyLCAzXSJdfQ==

require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"arcMovement":[function(require,module,exports){
exports.moveWithArc = function(layer, startPointX, startPointY, endPointX, endPointY) {
  var arc, proxy;
  arc = function(counter, layer, x1, y1, x2, y2) {
    layer.midX = startPointX - Math.sin((counter + 180) * Math.PI / 180) * (endPointX - startPointX);
    return layer.midY = endPointY - Math.cos((counter + 180) * Math.PI / 180) * (startPointY - endPointY);
  };
  proxy = new Layer({
    width: 0,
    height: 0,
    backgroundColor: "null"
  });
  proxy.states.add({
    finish: {
      x: 360
    }
  });
  proxy.states.next();
  return proxy.on("change:x", function() {
    return arc(proxy.x / 4, layer, startPointX, startPointY, endPointX, endPointY);
  });
};

exports.placeOnElipse = function(layer, centerX, centerY, angle, radiusX, radiusY) {
  layer.midX = centerX - Math.sin((angle + 180) * Math.PI / 180) * radiusX;
  return layer.midY = centerY - Math.cos((angle + 180) * Math.PI / 180) * radiusY;
};

exports.circlePoint = function(centerX, centerY, angle, radiusX, radiusY) {
  var x, y;
  x = centerX - Math.sin((angle + 180) * Math.PI / 180) * radiusX;
  y = centerY - Math.cos((angle + 180) * Math.PI / 180) * radiusY;
  return print(x, y);
};


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbWFtZXppdG8vZ2l0L21vdmVXaXRoQXJjL3BsYWNlT25DaXJjbGUyLmZyYW1lci9tb2R1bGVzL2FyY01vdmVtZW50LmNvZmZlZSIsIi9Vc2Vycy9tYW1leml0by9naXQvbW92ZVdpdGhBcmMvcGxhY2VPbkNpcmNsZTIuZnJhbWVyL21vZHVsZXMvbXlNb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDSUEsT0FBTyxDQUFDLFdBQVIsR0FBb0IsU0FBQyxLQUFELEVBQVEsV0FBUixFQUFxQixXQUFyQixFQUFrQyxTQUFsQyxFQUE2QyxTQUE3QztBQUNuQixNQUFBO0VBQUEsR0FBQSxHQUFJLFNBQUMsT0FBRCxFQUFTLEtBQVQsRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEIsRUFBd0IsRUFBeEIsRUFBNEIsRUFBNUI7SUFDSCxLQUFLLENBQUMsSUFBTixHQUFXLFdBQUEsR0FBWSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsT0FBQSxHQUFRLEdBQVQsQ0FBQSxHQUFpQixJQUFJLENBQUMsRUFBdEIsR0FBMkIsR0FBcEMsQ0FBQSxHQUF5QyxDQUFDLFNBQUEsR0FBVSxXQUFYO1dBQ2hFLEtBQUssQ0FBQyxJQUFOLEdBQVcsU0FBQSxHQUFVLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxPQUFBLEdBQVEsR0FBVCxDQUFBLEdBQWlCLElBQUksQ0FBQyxFQUF0QixHQUEyQixHQUFwQyxDQUFBLEdBQXlDLENBQUMsV0FBQSxHQUFZLFNBQWI7RUFGM0Q7RUFJSixLQUFBLEdBQVksSUFBQSxLQUFBLENBQ1g7SUFBQSxLQUFBLEVBQU8sQ0FBUDtJQUNBLE1BQUEsRUFBUSxDQURSO0lBRUEsZUFBQSxFQUFpQixNQUZqQjtHQURXO0VBS1osS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFiLENBQ0M7SUFBQSxNQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUcsR0FBSDtLQUREO0dBREQ7RUFJQSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQWIsQ0FBQTtTQUVBLEtBQUssQ0FBQyxFQUFOLENBQVMsVUFBVCxFQUFxQixTQUFBO1dBQ3BCLEdBQUEsQ0FBSSxLQUFLLENBQUMsQ0FBTixHQUFRLENBQVosRUFBZSxLQUFmLEVBQXNCLFdBQXRCLEVBQW1DLFdBQW5DLEVBQWdELFNBQWhELEVBQTJELFNBQTNEO0VBRG9CLENBQXJCO0FBaEJtQjs7QUFtQnBCLE9BQU8sQ0FBQyxhQUFSLEdBQXNCLFNBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsT0FBakMsRUFBMEMsT0FBMUM7RUFDckIsS0FBSyxDQUFDLElBQU4sR0FBVyxPQUFBLEdBQVEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLEtBQUEsR0FBTSxHQUFQLENBQUEsR0FBZSxJQUFJLENBQUMsRUFBcEIsR0FBeUIsR0FBbEMsQ0FBQSxHQUF1QztTQUMxRCxLQUFLLENBQUMsSUFBTixHQUFXLE9BQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsS0FBQSxHQUFNLEdBQVAsQ0FBQSxHQUFlLElBQUksQ0FBQyxFQUFwQixHQUF5QixHQUFsQyxDQUFBLEdBQXVDO0FBRnJDOztBQUl0QixPQUFPLENBQUMsV0FBUixHQUFvQixTQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLEtBQW5CLEVBQTBCLE9BQTFCLEVBQW1DLE9BQW5DO0FBQ2xCLE1BQUE7RUFBQSxDQUFBLEdBQUUsT0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxLQUFBLEdBQU0sR0FBUCxDQUFBLEdBQWUsSUFBSSxDQUFDLEVBQXBCLEdBQXlCLEdBQWxDLENBQUEsR0FBdUM7RUFDakQsQ0FBQSxHQUFFLE9BQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsS0FBQSxHQUFNLEdBQVAsQ0FBQSxHQUFlLElBQUksQ0FBQyxFQUFwQixHQUF5QixHQUFsQyxDQUFBLEdBQXVDO1NBQ2pELEtBQUEsQ0FBTSxDQUFOLEVBQVEsQ0FBUjtBQUhrQjs7OztBQ3ZCcEIsT0FBTyxDQUFDLEtBQVIsR0FBZ0I7O0FBRWhCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7U0FDcEIsS0FBQSxDQUFNLHVCQUFOO0FBRG9COztBQUdyQixPQUFPLENBQUMsT0FBUixHQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIjYXV0aG9yIFNlcmdpeSBWb3Jvbm92IHR3aXR0ZXIuY29tL21hbWV6aXRvIGRyaWJiYmxlLmNvbS9tYW1leml0b1xuI2RvbmUgZm9yIEZyYW1lciBMb25kb24gZnJhbWVybG9uZG9uLmNvbVxuXG5cbmV4cG9ydHMubW92ZVdpdGhBcmM9KGxheWVyLCBzdGFydFBvaW50WCwgc3RhcnRQb2ludFksIGVuZFBvaW50WCwgZW5kUG9pbnRZKS0+XG5cdGFyYz0oY291bnRlcixsYXllciwgeDEsIHkxLCB4MiwgeTIpLT5cblx0XHRsYXllci5taWRYPXN0YXJ0UG9pbnRYLU1hdGguc2luKChjb3VudGVyKzE4MCkgICogTWF0aC5QSSAvIDE4MCkqKGVuZFBvaW50WC1zdGFydFBvaW50WClcblx0XHRsYXllci5taWRZPWVuZFBvaW50WS1NYXRoLmNvcygoY291bnRlcisxODApICAqIE1hdGguUEkgLyAxODApKihzdGFydFBvaW50WS1lbmRQb2ludFkpXG5cblx0cHJveHkgPSBuZXcgTGF5ZXJcblx0XHR3aWR0aDogMFxuXHRcdGhlaWdodDogMFxuXHRcdGJhY2tncm91bmRDb2xvcjogXCJudWxsXCJcblxuXHRwcm94eS5zdGF0ZXMuYWRkXG5cdFx0ZmluaXNoOlxuXHRcdFx0eDogMzYwXG5cblx0cHJveHkuc3RhdGVzLm5leHQoKVxuXG5cdHByb3h5Lm9uIFwiY2hhbmdlOnhcIiwgLT5cblx0XHRhcmMgcHJveHkueC80LCBsYXllciwgc3RhcnRQb2ludFgsIHN0YXJ0UG9pbnRZLCBlbmRQb2ludFgsIGVuZFBvaW50WVxuXG5leHBvcnRzLnBsYWNlT25FbGlwc2U9KGxheWVyLCBjZW50ZXJYLCBjZW50ZXJZLCBhbmdsZSwgcmFkaXVzWCwgcmFkaXVzWSktPlxuXHRsYXllci5taWRYPWNlbnRlclgtTWF0aC5zaW4oKGFuZ2xlKzE4MCkgICogTWF0aC5QSSAvIDE4MCkqcmFkaXVzWFxuXHRsYXllci5taWRZPWNlbnRlclktTWF0aC5jb3MoKGFuZ2xlKzE4MCkgICogTWF0aC5QSSAvIDE4MCkqcmFkaXVzWVxuXG5leHBvcnRzLmNpcmNsZVBvaW50PShjZW50ZXJYLCBjZW50ZXJZLCBhbmdsZSwgcmFkaXVzWCwgcmFkaXVzWSktPlxuXHRcdHg9Y2VudGVyWC1NYXRoLnNpbigoYW5nbGUrMTgwKSAgKiBNYXRoLlBJIC8gMTgwKSpyYWRpdXNYXG5cdFx0eT1jZW50ZXJZLU1hdGguY29zKChhbmdsZSsxODApICAqIE1hdGguUEkgLyAxODApKnJhZGl1c1lcblx0XHRwcmludCB4LHlcbiIsIiMgQWRkIHRoZSBmb2xsb3dpbmcgbGluZSB0byB5b3VyIHByb2plY3QgaW4gRnJhbWVyIFN0dWRpby4gXG4jIG15TW9kdWxlID0gcmVxdWlyZSBcIm15TW9kdWxlXCJcbiMgUmVmZXJlbmNlIHRoZSBjb250ZW50cyBieSBuYW1lLCBsaWtlIG15TW9kdWxlLm15RnVuY3Rpb24oKSBvciBteU1vZHVsZS5teVZhclxuXG5leHBvcnRzLm15VmFyID0gXCJteVZhcmlhYmxlXCJcblxuZXhwb3J0cy5teUZ1bmN0aW9uID0gLT5cblx0cHJpbnQgXCJteUZ1bmN0aW9uIGlzIHJ1bm5pbmdcIlxuXG5leHBvcnRzLm15QXJyYXkgPSBbMSwgMiwgM10iXX0=
